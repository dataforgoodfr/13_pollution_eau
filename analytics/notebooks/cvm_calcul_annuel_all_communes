{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Calcul du nombre de prélèvements CVM non conforme par commune et par année\n",
    "\n",
    "L'objectif de ce notebook est de partir de la liste de communes cog_communes, et pour chaque commune et chaque année, calculer le nombre de prélèvements non conformes pour le CVM.\n",
    "\n",
    "Il y aura plusieurs aggrégations à faire :\n",
    "\n",
    "- commune (inseecommune) peut avoir plusieurs UDIs (cdreseau) **ET** un UDI peut avoir plusieurs communes (inseecommune) \n",
    "- un prélèvement (referenceprel) peut être rattaché à plusieurs UDIs (cdreseau)\n",
    "- un prélèvement (referenceprel) peut être composé de plusieurs paramètres (cdparametresiseeaux) ; mais dans le cas du CVM, il y a un seul paramètre selon la catégorisation de Pauline, donc c'est plus simple\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span style=\"None\">The &#x27;toml&#x27; package isn&#x27;t installed. To load settings from pyproject.toml or ~/.jupysql/config, install with: pip install toml</span>"
      ],
      "text/plain": [
       "The 'toml' package isn't installed. To load settings from pyproject.toml or ~/.jupysql/config, install with: pip install toml"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<span style=\"None\">Connecting to &#x27;duckdb:///../../database/data.duckdb&#x27;</span>"
      ],
      "text/plain": [
       "Connecting to 'duckdb:///../../database/data.duckdb'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%load_ext sql\n",
    "%sql duckdb:///../../database/data.duckdb\n",
    "%config SqlMagic.displaylimit = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span style=\"None\">Running query in &#x27;duckdb:///../../database/data.duckdb&#x27;</span>"
      ],
      "text/plain": [
       "Running query in 'duckdb:///../../database/data.duckdb'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "932902e98ea44fc2a3903efc5647bff3",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>referenceprel</th>\n",
       "            <th>cdparametresiseeaux</th>\n",
       "            <th>valtraduite</th>\n",
       "            <th>limitequal</th>\n",
       "            <th>de_partition</th>\n",
       "            <th>limitequal_float</th>\n",
       "            <th>unite</th>\n",
       "            <th>categorie</th>\n",
       "            <th>cdreseau</th>\n",
       "            <th>inseecommune</th>\n",
       "            <th>datetimeprel</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>00400121459</td>\n",
       "            <td>CHINE</td>\n",
       "            <td>0.000</td>\n",
       "            <td><=0,1 µg/L</td>\n",
       "            <td>2020</td>\n",
       "            <td>0.10000000149011612</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>pesticides</td>\n",
       "            <td>004000129</td>\n",
       "            <td>04058</td>\n",
       "            <td>2020-04-09 11:49:00</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>00400121459</td>\n",
       "            <td>CHINOME</td>\n",
       "            <td>0.000</td>\n",
       "            <td><=0,1 µg/L</td>\n",
       "            <td>2020</td>\n",
       "            <td>0.10000000149011612</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>pesticides</td>\n",
       "            <td>004000129</td>\n",
       "            <td>04058</td>\n",
       "            <td>2020-04-09 11:49:00</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>00400121459</td>\n",
       "            <td>CHLORB</td>\n",
       "            <td>0.000</td>\n",
       "            <td><=0,1 µg/L</td>\n",
       "            <td>2020</td>\n",
       "            <td>0.10000000149011612</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>pesticides</td>\n",
       "            <td>004000129</td>\n",
       "            <td>04058</td>\n",
       "            <td>2020-04-09 11:49:00</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>00400121459</td>\n",
       "            <td>CHLPM</td>\n",
       "            <td>0.000</td>\n",
       "            <td><=0,1 µg/L</td>\n",
       "            <td>2020</td>\n",
       "            <td>0.10000000149011612</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>pesticides</td>\n",
       "            <td>004000129</td>\n",
       "            <td>04058</td>\n",
       "            <td>2020-04-09 11:49:00</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>00400121459</td>\n",
       "            <td>CHLX</td>\n",
       "            <td>0.000</td>\n",
       "            <td><=0,1 µg/L</td>\n",
       "            <td>2020</td>\n",
       "            <td>0.10000000149011612</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>pesticides</td>\n",
       "            <td>004000129</td>\n",
       "            <td>04058</td>\n",
       "            <td>2020-04-09 11:49:00</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "+---------------+---------------------+-------------+------------+--------------+---------------------+-------+------------+-----------+--------------+---------------------+\n",
       "| referenceprel | cdparametresiseeaux | valtraduite | limitequal | de_partition |   limitequal_float  | unite | categorie  |  cdreseau | inseecommune |     datetimeprel    |\n",
       "+---------------+---------------------+-------------+------------+--------------+---------------------+-------+------------+-----------+--------------+---------------------+\n",
       "|  00400121459  |        CHINE        |    0.000    | <=0,1 µg/L |     2020     | 0.10000000149011612 |  µg/L | pesticides | 004000129 |    04058     | 2020-04-09 11:49:00 |\n",
       "|  00400121459  |       CHINOME       |    0.000    | <=0,1 µg/L |     2020     | 0.10000000149011612 |  µg/L | pesticides | 004000129 |    04058     | 2020-04-09 11:49:00 |\n",
       "|  00400121459  |        CHLORB       |    0.000    | <=0,1 µg/L |     2020     | 0.10000000149011612 |  µg/L | pesticides | 004000129 |    04058     | 2020-04-09 11:49:00 |\n",
       "|  00400121459  |        CHLPM        |    0.000    | <=0,1 µg/L |     2020     | 0.10000000149011612 |  µg/L | pesticides | 004000129 |    04058     | 2020-04-09 11:49:00 |\n",
       "|  00400121459  |         CHLX        |    0.000    | <=0,1 µg/L |     2020     | 0.10000000149011612 |  µg/L | pesticides | 004000129 |    04058     | 2020-04-09 11:49:00 |\n",
       "+---------------+---------------------+-------------+------------+--------------+---------------------+-------+------------+-----------+--------------+---------------------+"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "SELECT * FROM int__resultats_udi_communes\n",
    "LIMIT 5"
   ]
  },
  {
   "attachments": {
    "31bc6772-ec83-41bb-9432-f2ad4341d896.PNG": {
     "image/png": ""
    },
    "524d340b-f46a-4df7-ba88-b4decfdf9da3.PNG": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Pour le bilan annuel**\n",
    "\n",
    "![cvm_année.PNG](attachment:31bc6772-ec83-41bb-9432-f2ad4341d896.PNG)\n",
    "\n",
    "\n",
    "![non_qualifié.PNG](attachment:524d340b-f46a-4df7-ba88-b4decfdf9da3.PNG)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Faire la liste complètes des communes (pour chaque catégorie et années)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span style=\"None\">Running query in &#x27;duckdb:///../../database/data.duckdb&#x27;</span>"
      ],
      "text/plain": [
       "Running query in 'duckdb:///../../database/data.duckdb'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>annee</th>\n",
       "            <th>categorie</th>\n",
       "            <th>inseecommune</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>2024</td>\n",
       "            <td>cvm</td>\n",
       "            <td>48104</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>2024</td>\n",
       "            <td>cvm</td>\n",
       "            <td>51073</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>2024</td>\n",
       "            <td>cvm</td>\n",
       "            <td>52114</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>2024</td>\n",
       "            <td>cvm</td>\n",
       "            <td>55078</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>2024</td>\n",
       "            <td>cvm</td>\n",
       "            <td>55400</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>2024</td>\n",
       "            <td>cvm</td>\n",
       "            <td>57640</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>2024</td>\n",
       "            <td>cvm</td>\n",
       "            <td>60516</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>2024</td>\n",
       "            <td>cvm</td>\n",
       "            <td>62282</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>2024</td>\n",
       "            <td>cvm</td>\n",
       "            <td>63003</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>2024</td>\n",
       "            <td>cvm</td>\n",
       "            <td>63260</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>\n",
       "<span style=\"font-style:italic;text-align:center;\">Truncated to <a href=\"https://jupysql.ploomber.io/en/latest/api/configuration.html#displaylimit\">displaylimit</a> of 10.</span>"
      ],
      "text/plain": [
       "+-------+-----------+--------------+\n",
       "| annee | categorie | inseecommune |\n",
       "+-------+-----------+--------------+\n",
       "|  2024 |    cvm    |    48104     |\n",
       "|  2024 |    cvm    |    51073     |\n",
       "|  2024 |    cvm    |    52114     |\n",
       "|  2024 |    cvm    |    55078     |\n",
       "|  2024 |    cvm    |    55400     |\n",
       "|  2024 |    cvm    |    57640     |\n",
       "|  2024 |    cvm    |    60516     |\n",
       "|  2024 |    cvm    |    62282     |\n",
       "|  2024 |    cvm    |    63003     |\n",
       "|  2024 |    cvm    |    63260     |\n",
       "+-------+-----------+--------------+\n",
       "Truncated to displaylimit of 10."
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql --save list_communes\n",
    "WITH\n",
    "annees AS (\n",
    "    SELECT unnest(generate_series(2020, 2024)) as annee\n",
    "    )\n",
    "   \n",
    "SELECT DISTINCT\n",
    "    annees.annee AS annee, \n",
    "    'cvm' AS categorie,\n",
    "    inseecommune ,\n",
    " FROM\n",
    "      int__lien_commune_cdreseau\n",
    " FULL OUTER JOIN\n",
    "       annees\n",
    " ON\n",
    "    int__lien_commune_cdreseau.de_partition = annees.annee"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span style=\"None\">Running query in &#x27;duckdb:///../../database/data.duckdb&#x27;</span>"
      ],
      "text/plain": [
       "Running query in 'duckdb:///../../database/data.duckdb'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>annee</th>\n",
       "            <th>categorie</th>\n",
       "            <th>inseecommune</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>2023</td>\n",
       "            <td>cvm</td>\n",
       "            <td>07194</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>2020</td>\n",
       "            <td>cvm</td>\n",
       "            <td>07194</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>2021</td>\n",
       "            <td>cvm</td>\n",
       "            <td>07194</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>2024</td>\n",
       "            <td>cvm</td>\n",
       "            <td>07194</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>2022</td>\n",
       "            <td>cvm</td>\n",
       "            <td>07194</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "+-------+-----------+--------------+\n",
       "| annee | categorie | inseecommune |\n",
       "+-------+-----------+--------------+\n",
       "|  2023 |    cvm    |    07194     |\n",
       "|  2020 |    cvm    |    07194     |\n",
       "|  2021 |    cvm    |    07194     |\n",
       "|  2024 |    cvm    |    07194     |\n",
       "|  2022 |    cvm    |    07194     |\n",
       "+-------+-----------+--------------+"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql --with list_communes\n",
    "SELECT\n",
    "    *\n",
    "FROM\n",
    "   list_communes\n",
    "WHERE\n",
    "    inseecommune = '07194'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test cog pour le final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span style=\"None\">Running query in &#x27;duckdb:///../../database/data.duckdb&#x27;</span>"
      ],
      "text/plain": [
       "Running query in 'duckdb:///../../database/data.duckdb'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>TYPECOM</th>\n",
       "            <th>COM</th>\n",
       "            <th>REG</th>\n",
       "            <th>DEP</th>\n",
       "            <th>CTCD</th>\n",
       "            <th>ARR</th>\n",
       "            <th>TNCC</th>\n",
       "            <th>NCC</th>\n",
       "            <th>NCCENR</th>\n",
       "            <th>LIBELLE</th>\n",
       "            <th>CAN</th>\n",
       "            <th>COMPARENT</th>\n",
       "            <th>de_partition</th>\n",
       "            <th>de_ingestion_date</th>\n",
       "            <th>de_dataset_datetime</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>COM</td>\n",
       "            <td>01001</td>\n",
       "            <td>84</td>\n",
       "            <td>01</td>\n",
       "            <td>01D</td>\n",
       "            <td>012</td>\n",
       "            <td>5</td>\n",
       "            <td>ABERGEMENT CLEMENCIAT</td>\n",
       "            <td>Abergement-Clémenciat</td>\n",
       "            <td>L'Abergement-Clémenciat</td>\n",
       "            <td>0108</td>\n",
       "            <td>None</td>\n",
       "            <td>2024</td>\n",
       "            <td>2025-03-16</td>\n",
       "            <td>20240220</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>COM</td>\n",
       "            <td>01002</td>\n",
       "            <td>84</td>\n",
       "            <td>01</td>\n",
       "            <td>01D</td>\n",
       "            <td>011</td>\n",
       "            <td>5</td>\n",
       "            <td>ABERGEMENT DE VAREY</td>\n",
       "            <td>Abergement-de-Varey</td>\n",
       "            <td>L'Abergement-de-Varey</td>\n",
       "            <td>0101</td>\n",
       "            <td>None</td>\n",
       "            <td>2024</td>\n",
       "            <td>2025-03-16</td>\n",
       "            <td>20240220</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>COM</td>\n",
       "            <td>01004</td>\n",
       "            <td>84</td>\n",
       "            <td>01</td>\n",
       "            <td>01D</td>\n",
       "            <td>011</td>\n",
       "            <td>1</td>\n",
       "            <td>AMBERIEU EN BUGEY</td>\n",
       "            <td>Ambérieu-en-Bugey</td>\n",
       "            <td>Ambérieu-en-Bugey</td>\n",
       "            <td>0101</td>\n",
       "            <td>None</td>\n",
       "            <td>2024</td>\n",
       "            <td>2025-03-16</td>\n",
       "            <td>20240220</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>COM</td>\n",
       "            <td>01005</td>\n",
       "            <td>84</td>\n",
       "            <td>01</td>\n",
       "            <td>01D</td>\n",
       "            <td>012</td>\n",
       "            <td>1</td>\n",
       "            <td>AMBERIEUX EN DOMBES</td>\n",
       "            <td>Ambérieux-en-Dombes</td>\n",
       "            <td>Ambérieux-en-Dombes</td>\n",
       "            <td>0122</td>\n",
       "            <td>None</td>\n",
       "            <td>2024</td>\n",
       "            <td>2025-03-16</td>\n",
       "            <td>20240220</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>COM</td>\n",
       "            <td>01006</td>\n",
       "            <td>84</td>\n",
       "            <td>01</td>\n",
       "            <td>01D</td>\n",
       "            <td>011</td>\n",
       "            <td>1</td>\n",
       "            <td>AMBLEON</td>\n",
       "            <td>Ambléon</td>\n",
       "            <td>Ambléon</td>\n",
       "            <td>0104</td>\n",
       "            <td>None</td>\n",
       "            <td>2024</td>\n",
       "            <td>2025-03-16</td>\n",
       "            <td>20240220</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>COM</td>\n",
       "            <td>01007</td>\n",
       "            <td>84</td>\n",
       "            <td>01</td>\n",
       "            <td>01D</td>\n",
       "            <td>011</td>\n",
       "            <td>1</td>\n",
       "            <td>AMBRONAY</td>\n",
       "            <td>Ambronay</td>\n",
       "            <td>Ambronay</td>\n",
       "            <td>0101</td>\n",
       "            <td>None</td>\n",
       "            <td>2024</td>\n",
       "            <td>2025-03-16</td>\n",
       "            <td>20240220</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>COM</td>\n",
       "            <td>01008</td>\n",
       "            <td>84</td>\n",
       "            <td>01</td>\n",
       "            <td>01D</td>\n",
       "            <td>011</td>\n",
       "            <td>1</td>\n",
       "            <td>AMBUTRIX</td>\n",
       "            <td>Ambutrix</td>\n",
       "            <td>Ambutrix</td>\n",
       "            <td>0101</td>\n",
       "            <td>None</td>\n",
       "            <td>2024</td>\n",
       "            <td>2025-03-16</td>\n",
       "            <td>20240220</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>COM</td>\n",
       "            <td>01009</td>\n",
       "            <td>84</td>\n",
       "            <td>01</td>\n",
       "            <td>01D</td>\n",
       "            <td>011</td>\n",
       "            <td>1</td>\n",
       "            <td>ANDERT ET CONDON</td>\n",
       "            <td>Andert-et-Condon</td>\n",
       "            <td>Andert-et-Condon</td>\n",
       "            <td>0104</td>\n",
       "            <td>None</td>\n",
       "            <td>2024</td>\n",
       "            <td>2025-03-16</td>\n",
       "            <td>20240220</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>COM</td>\n",
       "            <td>01010</td>\n",
       "            <td>84</td>\n",
       "            <td>01</td>\n",
       "            <td>01D</td>\n",
       "            <td>011</td>\n",
       "            <td>1</td>\n",
       "            <td>ANGLEFORT</td>\n",
       "            <td>Anglefort</td>\n",
       "            <td>Anglefort</td>\n",
       "            <td>0110</td>\n",
       "            <td>None</td>\n",
       "            <td>2024</td>\n",
       "            <td>2025-03-16</td>\n",
       "            <td>20240220</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>COM</td>\n",
       "            <td>01011</td>\n",
       "            <td>84</td>\n",
       "            <td>01</td>\n",
       "            <td>01D</td>\n",
       "            <td>014</td>\n",
       "            <td>1</td>\n",
       "            <td>APREMONT</td>\n",
       "            <td>Apremont</td>\n",
       "            <td>Apremont</td>\n",
       "            <td>0114</td>\n",
       "            <td>None</td>\n",
       "            <td>2024</td>\n",
       "            <td>2025-03-16</td>\n",
       "            <td>20240220</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>\n",
       "<span style=\"font-style:italic;text-align:center;\">Truncated to <a href=\"https://jupysql.ploomber.io/en/latest/api/configuration.html#displaylimit\">displaylimit</a> of 10.</span>"
      ],
      "text/plain": [
       "+---------+-------+-----+-----+------+-----+------+-----------------------+-----------------------+-------------------------+------+-----------+--------------+-------------------+---------------------+\n",
       "| TYPECOM |  COM  | REG | DEP | CTCD | ARR | TNCC |          NCC          |         NCCENR        |         LIBELLE         | CAN  | COMPARENT | de_partition | de_ingestion_date | de_dataset_datetime |\n",
       "+---------+-------+-----+-----+------+-----+------+-----------------------+-----------------------+-------------------------+------+-----------+--------------+-------------------+---------------------+\n",
       "|   COM   | 01001 |  84 |  01 | 01D  | 012 |  5   | ABERGEMENT CLEMENCIAT | Abergement-Clémenciat | L'Abergement-Clémenciat | 0108 |    None   |     2024     |     2025-03-16    |       20240220      |\n",
       "|   COM   | 01002 |  84 |  01 | 01D  | 011 |  5   |  ABERGEMENT DE VAREY  |  Abergement-de-Varey  |  L'Abergement-de-Varey  | 0101 |    None   |     2024     |     2025-03-16    |       20240220      |\n",
       "|   COM   | 01004 |  84 |  01 | 01D  | 011 |  1   |   AMBERIEU EN BUGEY   |   Ambérieu-en-Bugey   |    Ambérieu-en-Bugey    | 0101 |    None   |     2024     |     2025-03-16    |       20240220      |\n",
       "|   COM   | 01005 |  84 |  01 | 01D  | 012 |  1   |  AMBERIEUX EN DOMBES  |  Ambérieux-en-Dombes  |   Ambérieux-en-Dombes   | 0122 |    None   |     2024     |     2025-03-16    |       20240220      |\n",
       "|   COM   | 01006 |  84 |  01 | 01D  | 011 |  1   |        AMBLEON        |        Ambléon        |         Ambléon         | 0104 |    None   |     2024     |     2025-03-16    |       20240220      |\n",
       "|   COM   | 01007 |  84 |  01 | 01D  | 011 |  1   |        AMBRONAY       |        Ambronay       |         Ambronay        | 0101 |    None   |     2024     |     2025-03-16    |       20240220      |\n",
       "|   COM   | 01008 |  84 |  01 | 01D  | 011 |  1   |        AMBUTRIX       |        Ambutrix       |         Ambutrix        | 0101 |    None   |     2024     |     2025-03-16    |       20240220      |\n",
       "|   COM   | 01009 |  84 |  01 | 01D  | 011 |  1   |    ANDERT ET CONDON   |    Andert-et-Condon   |     Andert-et-Condon    | 0104 |    None   |     2024     |     2025-03-16    |       20240220      |\n",
       "|   COM   | 01010 |  84 |  01 | 01D  | 011 |  1   |       ANGLEFORT       |       Anglefort       |        Anglefort        | 0110 |    None   |     2024     |     2025-03-16    |       20240220      |\n",
       "|   COM   | 01011 |  84 |  01 | 01D  | 014 |  1   |        APREMONT       |        Apremont       |         Apremont        | 0114 |    None   |     2024     |     2025-03-16    |       20240220      |\n",
       "+---------+-------+-----+-----+------+-----+------+-----------------------+-----------------------+-------------------------+------+-----------+--------------+-------------------+---------------------+\n",
       "Truncated to displaylimit of 10."
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql \n",
    "SELECT \n",
    "    *\n",
    "FROM \n",
    "  cog_communes\n",
    "WHERE\n",
    "    TYPECOM = 'COM'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%%sql \n",
    "WITH\n",
    "cog AS (\n",
    "    SELECT \n",
    "      DEP AS code_departement,\n",
    "      REG AS code_region,\n",
    "      COM AS inseecommune,\n",
    "      LIBELLE AS name_commune,\n",
    "    FROM \n",
    "      cog_communes\n",
    "    WHERE\n",
    "        TYPECOM = 'COM'\n",
    ")\n",
    "    \n",
    "SELECT\n",
    "        inseecommune,\n",
    "        COUNT(code_departement) AS nb_code_departement,\n",
    "        COUNT(code_region) AS nb_code_region,\n",
    "        COUNT(name_commune) AS nb_name_commune,\n",
    "FROM\n",
    "    cog\n",
    "GROUP BY \n",
    "       inseecommune\n",
    "HAVING \n",
    "    nb_code_departement > 1 OR nb_code_region >1 OR nb_name_commune>1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Les résultats par communes - Bilan annuel"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "%%sql \n",
    "WITH\n",
    "communes_year AS (\n",
    "    SELECT\n",
    "        de_partition AS annee,\n",
    "        categorie,\n",
    "        inseecommune,\n",
    "        sum(1) AS nb_analyses,\n",
    "        sum(CASE\n",
    "            WHEN\n",
    "                valtraduite = 0 OR valtraduite = 1 OR valtraduite IS NULL\n",
    "                OR valtraduite IS NULL\n",
    "                OR limitequal_float IS NULL\n",
    "                THEN 1\n",
    "            ELSE 0\n",
    "        END) AS nb_analyses_not_quantify,\n",
    "        sum(CASE\n",
    "            WHEN\n",
    "                limitequal_float IS NOT NULL AND valtraduite > limitequal_float\n",
    "                THEN 1\n",
    "            ELSE 0\n",
    "        END) AS nb_analyses_not_ok,\n",
    "        sum(CASE\n",
    "            WHEN\n",
    "                limitequal_float IS NOT NULL AND valtraduite <= limitequal_float\n",
    "                THEN 1\n",
    "            ELSE 0\n",
    "        END) AS nb_analyses_ok\n",
    "    FROM\n",
    "        int__resultats_udi_communes\n",
    "    WHERE\n",
    "        categorie = 'cvm'\n",
    "    GROUP BY\n",
    "        annee,\n",
    "        categorie,\n",
    "        inseecommune\n",
    ")\n",
    "\n",
    "SELECT\n",
    "    communes_year.annee,\n",
    "    communes_year.inseecommune,\n",
    "    communes_year.categorie,\n",
    "    'bilan annuel' AS periode,\n",
    "    CASE\n",
    "        WHEN communes_year.nb_analyses = 0\n",
    "            THEN 'Pas recherché'\n",
    "        WHEN\n",
    "            communes_year.nb_analyses_not_quantify > 0\n",
    "            AND communes_year.nb_analyses_ok = 0\n",
    "            THEN 'non quantifié'\n",
    "        WHEN\n",
    "            communes_year.nb_analyses > 0\n",
    "            AND communes_year.nb_analyses_not_ok >= 1\n",
    "            THEN '> 0,5 µg/L'\n",
    "        WHEN communes_year.nb_analyses > 0 AND communes_year.nb_analyses_ok >= 1\n",
    "            THEN '<= 0,5 µg/L'\n",
    "        ELSE 'Check SQL'\n",
    "    END AS resultat\n",
    "FROM\n",
    "    communes_year"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  SQL resultats_ALL_communes : Join avec list_communes_uid pour avoir la liste complète"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "%%sql \n",
    "SELECT\n",
    "    annees.annee,\n",
    "    commune_code_insee,\n",
    "    categorie,\n",
    "    coalesce(resultat,'Pas recherché') AS resultat\n",
    "FROM  \n",
    " list_communes_uid\n",
    "LEFT JOIN \n",
    " resultats_cvm\n",
    "ON\n",
    "    list_communes_uid.annee =  resultats_cvm.annee\n",
    "    AND  list_communes_uid.inseecommune  =  resultats_cvm.inseecommune\n",
    "    AND  list_communes_uid.categorie  =  resultats_cvm.categorie"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Join avec cog pour avoir le nom des communes"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "%%sql\n",
    "WITH \n",
    "cog AS (\n",
    "    SELECT \n",
    "      DEP AS code_departement,\n",
    "      REG AS code_region,\n",
    "      COM AS inseecommune,\n",
    "      LIBELLE AS name_commune,\n",
    "    FROM \n",
    "      cog_communes\n",
    "    WHERE\n",
    "        TYPECOM = 'COM'\n",
    ")\n",
    "    \n",
    "SELECT\n",
    "  resultats_ALL_communes.*,\n",
    "  cog.DEP AS  code_departement,\n",
    "  cog.REG AS  code_region,\n",
    "  cog.LIBELLE AS name_commune,\n",
    "FROM\n",
    "  resultats_ALL_communes\n",
    "LEFT JOIN  \n",
    "  cog\n",
    "ON \n",
    "  resultats_ALL_communes.inseecommune = cog.inseecommune"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### SQL complet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span style=\"None\">Running query in &#x27;duckdb:///../../database/data.duckdb&#x27;</span>"
      ],
      "text/plain": [
       "Running query in 'duckdb:///../../database/data.duckdb'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "64fd190f17c344858b2dfc009d60ec02",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>inseecommune</th>\n",
       "            <th>commune_nom</th>\n",
       "            <th>periode</th>\n",
       "            <th>categorie</th>\n",
       "            <th>resultat</th>\n",
       "            <th>annee</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>02585</td>\n",
       "            <td>Parcy-et-Tigny</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td><= 0,5 µg/L</td>\n",
       "            <td>2020</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>05072</td>\n",
       "            <td>Laye</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td><= 0,5 µg/L</td>\n",
       "            <td>2020</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>05109</td>\n",
       "            <td>Puy-Saint-Pierre</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td><= 0,5 µg/L</td>\n",
       "            <td>2020</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>09183</td>\n",
       "            <td>Mauvezin-de-Prat</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td><= 0,5 µg/L</td>\n",
       "            <td>2020</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>10288</td>\n",
       "            <td>Plaines-Saint-Lange</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td><= 0,5 µg/L</td>\n",
       "            <td>2020</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>11045</td>\n",
       "            <td>Bouriège</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td><= 0,5 µg/L</td>\n",
       "            <td>2020</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>21199</td>\n",
       "            <td>Corsaint</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td><= 0,5 µg/L</td>\n",
       "            <td>2020</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>26042</td>\n",
       "            <td>Beauvallon</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td><= 0,5 µg/L</td>\n",
       "            <td>2020</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>29222</td>\n",
       "            <td>Port-Launay</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td><= 0,5 µg/L</td>\n",
       "            <td>2020</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>2A269</td>\n",
       "            <td>Sari-Solenzara</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td><= 0,5 µg/L</td>\n",
       "            <td>2020</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>\n",
       "<span style=\"font-style:italic;text-align:center;\">Truncated to <a href=\"https://jupysql.ploomber.io/en/latest/api/configuration.html#displaylimit\">displaylimit</a> of 10.</span>"
      ],
      "text/plain": [
       "+--------------+---------------------+--------------+-----------+-------------+-------+\n",
       "| inseecommune |     commune_nom     |   periode    | categorie |   resultat  | annee |\n",
       "+--------------+---------------------+--------------+-----------+-------------+-------+\n",
       "|    02585     |    Parcy-et-Tigny   | bilan annuel |    cvm    | <= 0,5 µg/L |  2020 |\n",
       "|    05072     |         Laye        | bilan annuel |    cvm    | <= 0,5 µg/L |  2020 |\n",
       "|    05109     |   Puy-Saint-Pierre  | bilan annuel |    cvm    | <= 0,5 µg/L |  2020 |\n",
       "|    09183     |   Mauvezin-de-Prat  | bilan annuel |    cvm    | <= 0,5 µg/L |  2020 |\n",
       "|    10288     | Plaines-Saint-Lange | bilan annuel |    cvm    | <= 0,5 µg/L |  2020 |\n",
       "|    11045     |       Bouriège      | bilan annuel |    cvm    | <= 0,5 µg/L |  2020 |\n",
       "|    21199     |       Corsaint      | bilan annuel |    cvm    | <= 0,5 µg/L |  2020 |\n",
       "|    26042     |      Beauvallon     | bilan annuel |    cvm    | <= 0,5 µg/L |  2020 |\n",
       "|    29222     |     Port-Launay     | bilan annuel |    cvm    | <= 0,5 µg/L |  2020 |\n",
       "|    2A269     |    Sari-Solenzara   | bilan annuel |    cvm    | <= 0,5 µg/L |  2020 |\n",
       "+--------------+---------------------+--------------+-----------+-------------+-------+\n",
       "Truncated to displaylimit of 10."
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql --save resultats_ALL_communes_name\n",
    "WITH\n",
    "annees AS (\n",
    "    SELECT unnest(generate_series(2020, 2024)) AS annee\n",
    "),\n",
    "\n",
    "list_communes_uid AS (\n",
    "    SELECT DISTINCT\n",
    "        annees.annee,\n",
    "        'cvm' AS categorie,\n",
    "        com.inseecommune\n",
    "    FROM\n",
    "        int__lien_commune_cdreseau AS com\n",
    "    FULL OUTER JOIN\n",
    "        annees\n",
    "        ON\n",
    "            com.de_partition = annees.annee\n",
    "),\n",
    "\n",
    "communes_year AS (\n",
    "    SELECT\n",
    "        de_partition AS annee,\n",
    "        categorie,\n",
    "        inseecommune,\n",
    "        sum(1) AS nb_analyses,\n",
    "        sum(CASE\n",
    "            WHEN\n",
    "                valtraduite = 0 OR valtraduite = 1 OR valtraduite IS NULL\n",
    "                OR valtraduite IS NULL\n",
    "                OR limitequal_float IS NULL\n",
    "                THEN 1\n",
    "            ELSE 0\n",
    "        END) AS nb_analyses_not_quantify,\n",
    "        sum(CASE\n",
    "            WHEN\n",
    "                limitequal_float IS NOT NULL AND valtraduite > limitequal_float\n",
    "                THEN 1\n",
    "            ELSE 0\n",
    "        END) AS nb_analyses_not_ok,\n",
    "        sum(CASE\n",
    "            WHEN\n",
    "                limitequal_float IS NOT NULL AND valtraduite <= limitequal_float\n",
    "                THEN 1\n",
    "            ELSE 0\n",
    "        END) AS nb_analyses_ok\n",
    "    FROM\n",
    "        int__resultats_udi_communes\n",
    "    WHERE\n",
    "        categorie = 'cvm'\n",
    "    GROUP BY\n",
    "        annee,\n",
    "        categorie,\n",
    "        inseecommune\n",
    "),\n",
    "\n",
    "int__resultats_communes AS (\n",
    "    SELECT\n",
    "        communes_year.annee,\n",
    "        communes_year.inseecommune,\n",
    "        communes_year.categorie,\n",
    "        'bilan annuel' AS periode,\n",
    "        CASE\n",
    "            WHEN communes_year.nb_analyses = 0\n",
    "                THEN 'Pas recherché'\n",
    "            WHEN\n",
    "                communes_year.nb_analyses_not_quantify > 0\n",
    "                AND communes_year.nb_analyses_ok = 0\n",
    "                THEN 'non quantifié'\n",
    "            WHEN\n",
    "                communes_year.nb_analyses > 0\n",
    "                AND communes_year.nb_analyses_not_ok >= 1\n",
    "                THEN '> 0,5 µg/L'\n",
    "            WHEN communes_year.nb_analyses > 0 AND communes_year.nb_analyses_ok >= 1\n",
    "                THEN '<= 0,5 µg/L'\n",
    "            ELSE 'Check SQL'\n",
    "        END AS resultat\n",
    "    FROM\n",
    "        communes_year\n",
    "),\n",
    "\n",
    "int__resultats_all_communes AS (\n",
    "    SELECT\n",
    "        list_communes_uid.annee,\n",
    "        list_communes_uid.inseecommune,\n",
    "        list_communes_uid.categorie,\n",
    "        coalesce(int__resultats_communes.resultat, 'Pas recherché') AS resultat\n",
    "    FROM\n",
    "        list_communes_uid\n",
    "    LEFT JOIN\n",
    "        int__resultats_communes\n",
    "        ON\n",
    "            list_communes_uid.annee = int__resultats_communes.annee\n",
    "            AND  list_communes_uid.categorie  =  int__resultats_communes.categorie\n",
    "            AND list_communes_uid.inseecommune\n",
    "            = int__resultats_communes.inseecommune\n",
    "),\n",
    "\n",
    "cog AS (\n",
    "    SELECT\n",
    "        dep AS code_departement,\n",
    "        reg AS code_region,\n",
    "        com AS inseecommune,\n",
    "        libelle AS commune_nom\n",
    "    FROM\n",
    "        stg_communes__cog\n",
    "    WHERE\n",
    "        typecom = 'COM'\n",
    ")\n",
    "\n",
    "SELECT\n",
    "    int__resultats_all_communes.inseecommune,\n",
    "    cog.commune_nom,\n",
    "    'bilan annuel' AS periode,\n",
    "    int__resultats_all_communes.categorie,\n",
    "    int__resultats_all_communes.resultat,\n",
    "    int__resultats_all_communes.annee,\n",
    "FROM\n",
    "    int__resultats_all_communes\n",
    "LEFT JOIN\n",
    "    cog\n",
    "    ON\n",
    "        int__resultats_all_communes.inseecommune = cog.inseecommune\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Check"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span style=\"None\">Running query in &#x27;duckdb:///../../database/data.duckdb&#x27;</span>"
      ],
      "text/plain": [
       "Running query in 'duckdb:///../../database/data.duckdb'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f75920d9f959420cb8b2b1240e7679a6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>inseecommune</th>\n",
       "            <th>commune_nom</th>\n",
       "            <th>periode</th>\n",
       "            <th>categorie</th>\n",
       "            <th>resultat</th>\n",
       "            <th>annee</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "+--------------+-------------+---------+-----------+----------+-------+\n",
       "| inseecommune | commune_nom | periode | categorie | resultat | annee |\n",
       "+--------------+-------------+---------+-----------+----------+-------+\n",
       "+--------------+-------------+---------+-----------+----------+-------+"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql --with resultats_ALL_communes_name\n",
    "SELECT \n",
    "    *\n",
    "FROM\n",
    "    resultats_ALL_communes_name\n",
    "WHERE\n",
    "    resultat = 'Check SQL'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span style=\"None\">Running query in &#x27;duckdb:///../../database/data.duckdb&#x27;</span>"
      ],
      "text/plain": [
       "Running query in 'duckdb:///../../database/data.duckdb'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b1774df9ef184b57b0d9393638a8f5bd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>resultat</th>\n",
       "            <th>count_star()</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td><= 0,5 µg/L</td>\n",
       "            <td>158741</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>> 0,5 µg/L</td>\n",
       "            <td>3049</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>non quantifié</td>\n",
       "            <td>8</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>Pas recherché</td>\n",
       "            <td>12358</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "+---------------+--------------+\n",
       "|    resultat   | count_star() |\n",
       "+---------------+--------------+\n",
       "|  <= 0,5 µg/L  |    158741    |\n",
       "|   > 0,5 µg/L  |     3049     |\n",
       "| non quantifié |      8       |\n",
       "| Pas recherché |    12358     |\n",
       "+---------------+--------------+"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql --with resultats_ALL_communes_name\n",
    "SELECT \n",
    "    resultat,\n",
    "    COUNT(*)\n",
    "FROM\n",
    "    resultats_ALL_communes_name\n",
    "WHERE\n",
    "     categorie = 'cvm'\n",
    "GROUP BY\n",
    "    resultat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span style=\"None\">Running query in &#x27;duckdb:///../../database/data.duckdb&#x27;</span>"
      ],
      "text/plain": [
       "Running query in 'duckdb:///../../database/data.duckdb'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "72d772dfcf3f4acca5cce526df0ac8ac",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>inseecommune</th>\n",
       "            <th>commune_nom</th>\n",
       "            <th>periode</th>\n",
       "            <th>categorie</th>\n",
       "            <th>resultat</th>\n",
       "            <th>annee</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "+--------------+-------------+---------+-----------+----------+-------+\n",
       "| inseecommune | commune_nom | periode | categorie | resultat | annee |\n",
       "+--------------+-------------+---------+-----------+----------+-------+\n",
       "+--------------+-------------+---------+-----------+----------+-------+"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql --with resultats_ALL_communes_name\n",
    "SELECT \n",
    "    *\n",
    "FROM\n",
    "    resultats_ALL_communes_name\n",
    "WHERE\n",
    "    resultat = 'Check SQL'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span style=\"None\">Running query in &#x27;duckdb:///../../database/data.duckdb&#x27;</span>"
      ],
      "text/plain": [
       "Running query in 'duckdb:///../../database/data.duckdb'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "df46b84b91264c1288d8cbc222c0a59e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>resultat</th>\n",
       "            <th>count_star()</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>> 0,5 µg/L</td>\n",
       "            <td>3049</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>Pas recherché</td>\n",
       "            <td>12358</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>non quantifié</td>\n",
       "            <td>8</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td><= 0,5 µg/L</td>\n",
       "            <td>158741</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "+---------------+--------------+\n",
       "|    resultat   | count_star() |\n",
       "+---------------+--------------+\n",
       "|   > 0,5 µg/L  |     3049     |\n",
       "| Pas recherché |    12358     |\n",
       "| non quantifié |      8       |\n",
       "|  <= 0,5 µg/L  |    158741    |\n",
       "+---------------+--------------+"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql --with resultats_ALL_communes_name\n",
    "SELECT \n",
    "    resultat,\n",
    "    COUNT(*)\n",
    "FROM\n",
    "    resultats_ALL_communes_name\n",
    "WHERE\n",
    "     categorie = 'cvm'\n",
    "GROUP BY\n",
    "    resultat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span style=\"None\">Running query in &#x27;duckdb:///../../database/data.duckdb&#x27;</span>"
      ],
      "text/plain": [
       "Running query in 'duckdb:///../../database/data.duckdb'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>year</th>\n",
       "            <th>nb_inseecommune</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>2020</td>\n",
       "            <td>34788</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>2021</td>\n",
       "            <td>34833</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>2022</td>\n",
       "            <td>34874</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>2023</td>\n",
       "            <td>34852</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>2024</td>\n",
       "            <td>34809</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "+------+-----------------+\n",
       "| year | nb_inseecommune |\n",
       "+------+-----------------+\n",
       "| 2020 |      34788      |\n",
       "| 2021 |      34833      |\n",
       "| 2022 |      34874      |\n",
       "| 2023 |      34852      |\n",
       "| 2024 |      34809      |\n",
       "+------+-----------------+"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "SELECT\n",
    "    de_partition as year,\n",
    "    COUNT(DISTINCT inseecommune) AS nb_inseecommune\n",
    "FROM \n",
    " edc_communes\n",
    "GROUP BY \n",
    "    1 \n",
    "ORDER BY \n",
    "   1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span style=\"None\">Running query in &#x27;duckdb:///../../database/data.duckdb&#x27;</span>"
      ],
      "text/plain": [
       "Running query in 'duckdb:///../../database/data.duckdb'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "a0cdfa280c394746b0667293bfd293fb",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>annee</th>\n",
       "            <th>nb_inseecommune</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>2020</td>\n",
       "            <td>34788</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>2021</td>\n",
       "            <td>34833</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>2022</td>\n",
       "            <td>34874</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>2023</td>\n",
       "            <td>34852</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>2024</td>\n",
       "            <td>34809</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "+-------+-----------------+\n",
       "| annee | nb_inseecommune |\n",
       "+-------+-----------------+\n",
       "|  2020 |      34788      |\n",
       "|  2021 |      34833      |\n",
       "|  2022 |      34874      |\n",
       "|  2023 |      34852      |\n",
       "|  2024 |      34809      |\n",
       "+-------+-----------------+"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql --with resultats_ALL_communes_name\n",
    " SELECT \n",
    "    annee,\n",
    "    COUNT(DISTINCT inseecommune) AS nb_inseecommune\n",
    " FROM\n",
    "   resultats_ALL_communes_name\n",
    "GROUP BY \n",
    "    1\n",
    "ORDER BY \n",
    "   1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### commune_code_insee = '07194'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span style=\"None\">Running query in &#x27;duckdb:///../../database/data.duckdb&#x27;</span>"
      ],
      "text/plain": [
       "Running query in 'duckdb:///../../database/data.duckdb'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "3d072cfa1dd64e30a067b23ff50aed4a",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>referenceprel</th>\n",
       "            <th>cdparametresiseeaux</th>\n",
       "            <th>valtraduite</th>\n",
       "            <th>limitequal</th>\n",
       "            <th>de_partition</th>\n",
       "            <th>limitequal_float</th>\n",
       "            <th>unite</th>\n",
       "            <th>categorie</th>\n",
       "            <th>cdreseau</th>\n",
       "            <th>inseecommune</th>\n",
       "            <th>datetimeprel</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>00700187059</td>\n",
       "            <td>CLVYL</td>\n",
       "            <td>3.600</td>\n",
       "            <td><=0.5 µg/L</td>\n",
       "            <td>2022</td>\n",
       "            <td>0.5</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>cvm</td>\n",
       "            <td>007001617</td>\n",
       "            <td>07194</td>\n",
       "            <td>2022-08-31 13:31:00</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>00700187150</td>\n",
       "            <td>CLVYL</td>\n",
       "            <td>1.600</td>\n",
       "            <td><=0.5 µg/L</td>\n",
       "            <td>2022</td>\n",
       "            <td>0.5</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>cvm</td>\n",
       "            <td>007001617</td>\n",
       "            <td>07194</td>\n",
       "            <td>2022-09-14 14:29:00</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>00700187169</td>\n",
       "            <td>CLVYL</td>\n",
       "            <td>0.370</td>\n",
       "            <td><=0.5 µg/L</td>\n",
       "            <td>2022</td>\n",
       "            <td>0.5</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>cvm</td>\n",
       "            <td>007001617</td>\n",
       "            <td>07194</td>\n",
       "            <td>2022-09-21 09:20:00</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>00700187170</td>\n",
       "            <td>CLVYL</td>\n",
       "            <td>1.200</td>\n",
       "            <td><=0.5 µg/L</td>\n",
       "            <td>2022</td>\n",
       "            <td>0.5</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>cvm</td>\n",
       "            <td>007001617</td>\n",
       "            <td>07194</td>\n",
       "            <td>2022-09-21 09:05:00</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>00700187171</td>\n",
       "            <td>CLVYL</td>\n",
       "            <td>3.100</td>\n",
       "            <td><=0.5 µg/L</td>\n",
       "            <td>2022</td>\n",
       "            <td>0.5</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>cvm</td>\n",
       "            <td>007001617</td>\n",
       "            <td>07194</td>\n",
       "            <td>2022-09-21 09:35:00</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>00700187172</td>\n",
       "            <td>CLVYL</td>\n",
       "            <td>3.400</td>\n",
       "            <td><=0.5 µg/L</td>\n",
       "            <td>2022</td>\n",
       "            <td>0.5</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>cvm</td>\n",
       "            <td>007001617</td>\n",
       "            <td>07194</td>\n",
       "            <td>2022-09-21 09:50:00</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>00700187629</td>\n",
       "            <td>CLVYL</td>\n",
       "            <td>0.000</td>\n",
       "            <td><=0.5 µg/L</td>\n",
       "            <td>2022</td>\n",
       "            <td>0.5</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>cvm</td>\n",
       "            <td>007001388</td>\n",
       "            <td>07194</td>\n",
       "            <td>2022-10-27 15:59:00</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>00700187813</td>\n",
       "            <td>CLVYL</td>\n",
       "            <td>0.900</td>\n",
       "            <td><=0.5 µg/L</td>\n",
       "            <td>2022</td>\n",
       "            <td>0.5</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>cvm</td>\n",
       "            <td>007001617</td>\n",
       "            <td>07194</td>\n",
       "            <td>2022-10-19 15:29:00</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>00700187753</td>\n",
       "            <td>CLVYL</td>\n",
       "            <td>2.700</td>\n",
       "            <td><=0.5 µg/L</td>\n",
       "            <td>2022</td>\n",
       "            <td>0.5</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>cvm</td>\n",
       "            <td>007001617</td>\n",
       "            <td>07194</td>\n",
       "            <td>2022-10-05 11:58:00</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>00700198480</td>\n",
       "            <td>CLVYL</td>\n",
       "            <td>0.260</td>\n",
       "            <td><=0.5 µg/L</td>\n",
       "            <td>2024</td>\n",
       "            <td>0.5</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>cvm</td>\n",
       "            <td>007001617</td>\n",
       "            <td>07194</td>\n",
       "            <td>2024-03-04 08:51:00</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>\n",
       "<span style=\"font-style:italic;text-align:center;\">Truncated to <a href=\"https://jupysql.ploomber.io/en/latest/api/configuration.html#displaylimit\">displaylimit</a> of 10.</span>"
      ],
      "text/plain": [
       "+---------------+---------------------+-------------+------------+--------------+------------------+-------+-----------+-----------+--------------+---------------------+\n",
       "| referenceprel | cdparametresiseeaux | valtraduite | limitequal | de_partition | limitequal_float | unite | categorie |  cdreseau | inseecommune |     datetimeprel    |\n",
       "+---------------+---------------------+-------------+------------+--------------+------------------+-------+-----------+-----------+--------------+---------------------+\n",
       "|  00700187059  |        CLVYL        |    3.600    | <=0.5 µg/L |     2022     |       0.5        |  µg/L |    cvm    | 007001617 |    07194     | 2022-08-31 13:31:00 |\n",
       "|  00700187150  |        CLVYL        |    1.600    | <=0.5 µg/L |     2022     |       0.5        |  µg/L |    cvm    | 007001617 |    07194     | 2022-09-14 14:29:00 |\n",
       "|  00700187169  |        CLVYL        |    0.370    | <=0.5 µg/L |     2022     |       0.5        |  µg/L |    cvm    | 007001617 |    07194     | 2022-09-21 09:20:00 |\n",
       "|  00700187170  |        CLVYL        |    1.200    | <=0.5 µg/L |     2022     |       0.5        |  µg/L |    cvm    | 007001617 |    07194     | 2022-09-21 09:05:00 |\n",
       "|  00700187171  |        CLVYL        |    3.100    | <=0.5 µg/L |     2022     |       0.5        |  µg/L |    cvm    | 007001617 |    07194     | 2022-09-21 09:35:00 |\n",
       "|  00700187172  |        CLVYL        |    3.400    | <=0.5 µg/L |     2022     |       0.5        |  µg/L |    cvm    | 007001617 |    07194     | 2022-09-21 09:50:00 |\n",
       "|  00700187629  |        CLVYL        |    0.000    | <=0.5 µg/L |     2022     |       0.5        |  µg/L |    cvm    | 007001388 |    07194     | 2022-10-27 15:59:00 |\n",
       "|  00700187813  |        CLVYL        |    0.900    | <=0.5 µg/L |     2022     |       0.5        |  µg/L |    cvm    | 007001617 |    07194     | 2022-10-19 15:29:00 |\n",
       "|  00700187753  |        CLVYL        |    2.700    | <=0.5 µg/L |     2022     |       0.5        |  µg/L |    cvm    | 007001617 |    07194     | 2022-10-05 11:58:00 |\n",
       "|  00700198480  |        CLVYL        |    0.260    | <=0.5 µg/L |     2024     |       0.5        |  µg/L |    cvm    | 007001617 |    07194     | 2024-03-04 08:51:00 |\n",
       "+---------------+---------------------+-------------+------------+--------------+------------------+-------+-----------+-----------+--------------+---------------------+\n",
       "Truncated to displaylimit of 10."
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    " SELECT \n",
    "   *\n",
    " FROM\n",
    "   int__resultats_udi_communes\n",
    "WHERE\n",
    "    inseecommune = '07194'\n",
    "    AND categorie = 'cvm'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span style=\"None\">Running query in &#x27;duckdb:///../../database/data.duckdb&#x27;</span>"
      ],
      "text/plain": [
       "Running query in 'duckdb:///../../database/data.duckdb'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>inseecommune</th>\n",
       "            <th>commune_nom</th>\n",
       "            <th>periode</th>\n",
       "            <th>categorie</th>\n",
       "            <th>resultat</th>\n",
       "            <th>annee</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>07194</td>\n",
       "            <td>Rochessauve</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td><= 0,5 µg/L</td>\n",
       "            <td>2020</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>07194</td>\n",
       "            <td>Rochessauve</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td><= 0,5 µg/L</td>\n",
       "            <td>2021</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>07194</td>\n",
       "            <td>Rochessauve</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td>> 0,5 µg/L</td>\n",
       "            <td>2022</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>07194</td>\n",
       "            <td>Rochessauve</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td>> 0,5 µg/L</td>\n",
       "            <td>2023</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>07194</td>\n",
       "            <td>Rochessauve</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td>> 0,5 µg/L</td>\n",
       "            <td>2024</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "+--------------+-------------+--------------+-----------+-------------+-------+\n",
       "| inseecommune | commune_nom |   periode    | categorie |   resultat  | annee |\n",
       "+--------------+-------------+--------------+-----------+-------------+-------+\n",
       "|    07194     | Rochessauve | bilan annuel |    cvm    | <= 0,5 µg/L |  2020 |\n",
       "|    07194     | Rochessauve | bilan annuel |    cvm    | <= 0,5 µg/L |  2021 |\n",
       "|    07194     | Rochessauve | bilan annuel |    cvm    |  > 0,5 µg/L |  2022 |\n",
       "|    07194     | Rochessauve | bilan annuel |    cvm    |  > 0,5 µg/L |  2023 |\n",
       "|    07194     | Rochessauve | bilan annuel |    cvm    |  > 0,5 µg/L |  2024 |\n",
       "+--------------+-------------+--------------+-----------+-------------+-------+"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql --with resultats_ALL_communes_name \n",
    " SELECT \n",
    "   *\n",
    " FROM\n",
    "   resultats_ALL_communes_name\n",
    "WHERE\n",
    "    inseecommune = '07194'\n",
    "    AND categorie = 'cvm'\n",
    "ORDER BY \n",
    "    annee"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### commune_code_insee = '01002'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span style=\"None\">Running query in &#x27;duckdb:///../../database/data.duckdb&#x27;</span>"
      ],
      "text/plain": [
       "Running query in 'duckdb:///../../database/data.duckdb'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "9a73592028b441879bd92a338a7ee313",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>referenceprel</th>\n",
       "            <th>cdparametresiseeaux</th>\n",
       "            <th>valtraduite</th>\n",
       "            <th>limitequal</th>\n",
       "            <th>de_partition</th>\n",
       "            <th>limitequal_float</th>\n",
       "            <th>unite</th>\n",
       "            <th>categorie</th>\n",
       "            <th>cdreseau</th>\n",
       "            <th>inseecommune</th>\n",
       "            <th>datetimeprel</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>00100130490</td>\n",
       "            <td>CLVYL</td>\n",
       "            <td>0.000</td>\n",
       "            <td><=0.5 µg/L</td>\n",
       "            <td>2022</td>\n",
       "            <td>0.5</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>cvm</td>\n",
       "            <td>001000369</td>\n",
       "            <td>01002</td>\n",
       "            <td>2022-04-26 09:56:00</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>00100139937</td>\n",
       "            <td>CLVYL</td>\n",
       "            <td>0.000</td>\n",
       "            <td><=0.5 µg/L</td>\n",
       "            <td>2024</td>\n",
       "            <td>0.5</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>cvm</td>\n",
       "            <td>001000369</td>\n",
       "            <td>01002</td>\n",
       "            <td>2024-03-26 15:10:00</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "+---------------+---------------------+-------------+------------+--------------+------------------+-------+-----------+-----------+--------------+---------------------+\n",
       "| referenceprel | cdparametresiseeaux | valtraduite | limitequal | de_partition | limitequal_float | unite | categorie |  cdreseau | inseecommune |     datetimeprel    |\n",
       "+---------------+---------------------+-------------+------------+--------------+------------------+-------+-----------+-----------+--------------+---------------------+\n",
       "|  00100130490  |        CLVYL        |    0.000    | <=0.5 µg/L |     2022     |       0.5        |  µg/L |    cvm    | 001000369 |    01002     | 2022-04-26 09:56:00 |\n",
       "|  00100139937  |        CLVYL        |    0.000    | <=0.5 µg/L |     2024     |       0.5        |  µg/L |    cvm    | 001000369 |    01002     | 2024-03-26 15:10:00 |\n",
       "+---------------+---------------------+-------------+------------+--------------+------------------+-------+-----------+-----------+--------------+---------------------+"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql \n",
    " SELECT \n",
    "   *\n",
    " FROM\n",
    "   int__resultats_udi_communes\n",
    "WHERE\n",
    "    inseecommune = '01002'\n",
    "    AND categorie = 'cvm'\n",
    "ORDER BY \n",
    "    de_partition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span style=\"None\">Running query in &#x27;duckdb:///../../database/data.duckdb&#x27;</span>"
      ],
      "text/plain": [
       "Running query in 'duckdb:///../../database/data.duckdb'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>inseecommune</th>\n",
       "            <th>commune_nom</th>\n",
       "            <th>periode</th>\n",
       "            <th>categorie</th>\n",
       "            <th>resultat</th>\n",
       "            <th>annee</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>01002</td>\n",
       "            <td>L'Abergement-de-Varey</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td>Pas recherché</td>\n",
       "            <td>2020</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>01002</td>\n",
       "            <td>L'Abergement-de-Varey</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td>Pas recherché</td>\n",
       "            <td>2021</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>01002</td>\n",
       "            <td>L'Abergement-de-Varey</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td><= 0,5 µg/L</td>\n",
       "            <td>2022</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>01002</td>\n",
       "            <td>L'Abergement-de-Varey</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td>Pas recherché</td>\n",
       "            <td>2023</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>01002</td>\n",
       "            <td>L'Abergement-de-Varey</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td><= 0,5 µg/L</td>\n",
       "            <td>2024</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "+--------------+-----------------------+--------------+-----------+---------------+-------+\n",
       "| inseecommune |      commune_nom      |   periode    | categorie |    resultat   | annee |\n",
       "+--------------+-----------------------+--------------+-----------+---------------+-------+\n",
       "|    01002     | L'Abergement-de-Varey | bilan annuel |    cvm    | Pas recherché |  2020 |\n",
       "|    01002     | L'Abergement-de-Varey | bilan annuel |    cvm    | Pas recherché |  2021 |\n",
       "|    01002     | L'Abergement-de-Varey | bilan annuel |    cvm    |  <= 0,5 µg/L  |  2022 |\n",
       "|    01002     | L'Abergement-de-Varey | bilan annuel |    cvm    | Pas recherché |  2023 |\n",
       "|    01002     | L'Abergement-de-Varey | bilan annuel |    cvm    |  <= 0,5 µg/L  |  2024 |\n",
       "+--------------+-----------------------+--------------+-----------+---------------+-------+"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql --with resultats_ALL_communes_name \n",
    " SELECT \n",
    "   *\n",
    " FROM\n",
    "   resultats_ALL_communes_name\n",
    "WHERE\n",
    "    inseecommune = '01002'\n",
    "    AND categorie = 'cvm'\n",
    "ORDER BY \n",
    "    annee"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### commune_code_insee = '08031'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span style=\"None\">Running query in &#x27;duckdb:///../../database/data.duckdb&#x27;</span>"
      ],
      "text/plain": [
       "Running query in 'duckdb:///../../database/data.duckdb'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "e8751fa7d8504f81ba9ee98d11d1ccf5",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>referenceprel</th>\n",
       "            <th>cdparametresiseeaux</th>\n",
       "            <th>valtraduite</th>\n",
       "            <th>limitequal</th>\n",
       "            <th>de_partition</th>\n",
       "            <th>limitequal_float</th>\n",
       "            <th>unite</th>\n",
       "            <th>categorie</th>\n",
       "            <th>cdreseau</th>\n",
       "            <th>inseecommune</th>\n",
       "            <th>datetimeprel</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>00800092855</td>\n",
       "            <td>CLVYL</td>\n",
       "            <td>0.000</td>\n",
       "            <td><=0.5 µg/L</td>\n",
       "            <td>2020</td>\n",
       "            <td>0.5</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>cvm</td>\n",
       "            <td>008000543</td>\n",
       "            <td>08031</td>\n",
       "            <td>2020-12-17 12:45:00</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>00800092483</td>\n",
       "            <td>CLVYL</td>\n",
       "            <td>0.700</td>\n",
       "            <td><=0.5 µg/L</td>\n",
       "            <td>2020</td>\n",
       "            <td>0.5</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>cvm</td>\n",
       "            <td>008000543</td>\n",
       "            <td>08031</td>\n",
       "            <td>2020-11-17 12:44:00</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>00800094118</td>\n",
       "            <td>CLVYL</td>\n",
       "            <td>0.000</td>\n",
       "            <td><=0.5 µg/L</td>\n",
       "            <td>2021</td>\n",
       "            <td>0.5</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>cvm</td>\n",
       "            <td>008000543</td>\n",
       "            <td>08031</td>\n",
       "            <td>2021-05-27 09:19:00</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>00800102498</td>\n",
       "            <td>CLVYL</td>\n",
       "            <td>0.000</td>\n",
       "            <td><=0.5 µg/L</td>\n",
       "            <td>2023</td>\n",
       "            <td>0.5</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>cvm</td>\n",
       "            <td>008000543</td>\n",
       "            <td>08031</td>\n",
       "            <td>2023-09-22 14:14:00</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>00800106109</td>\n",
       "            <td>CLVYL</td>\n",
       "            <td>0.900</td>\n",
       "            <td><=0.5 µg/L</td>\n",
       "            <td>2024</td>\n",
       "            <td>0.5</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>cvm</td>\n",
       "            <td>008000543</td>\n",
       "            <td>08031</td>\n",
       "            <td>2024-09-24 12:24:00</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>00800105054</td>\n",
       "            <td>CLVYL</td>\n",
       "            <td>0.800</td>\n",
       "            <td><=0.5 µg/L</td>\n",
       "            <td>2024</td>\n",
       "            <td>0.5</td>\n",
       "            <td>µg/L</td>\n",
       "            <td>cvm</td>\n",
       "            <td>008000543</td>\n",
       "            <td>08031</td>\n",
       "            <td>2024-06-10 12:21:00</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "+---------------+---------------------+-------------+------------+--------------+------------------+-------+-----------+-----------+--------------+---------------------+\n",
       "| referenceprel | cdparametresiseeaux | valtraduite | limitequal | de_partition | limitequal_float | unite | categorie |  cdreseau | inseecommune |     datetimeprel    |\n",
       "+---------------+---------------------+-------------+------------+--------------+------------------+-------+-----------+-----------+--------------+---------------------+\n",
       "|  00800092855  |        CLVYL        |    0.000    | <=0.5 µg/L |     2020     |       0.5        |  µg/L |    cvm    | 008000543 |    08031     | 2020-12-17 12:45:00 |\n",
       "|  00800092483  |        CLVYL        |    0.700    | <=0.5 µg/L |     2020     |       0.5        |  µg/L |    cvm    | 008000543 |    08031     | 2020-11-17 12:44:00 |\n",
       "|  00800094118  |        CLVYL        |    0.000    | <=0.5 µg/L |     2021     |       0.5        |  µg/L |    cvm    | 008000543 |    08031     | 2021-05-27 09:19:00 |\n",
       "|  00800102498  |        CLVYL        |    0.000    | <=0.5 µg/L |     2023     |       0.5        |  µg/L |    cvm    | 008000543 |    08031     | 2023-09-22 14:14:00 |\n",
       "|  00800106109  |        CLVYL        |    0.900    | <=0.5 µg/L |     2024     |       0.5        |  µg/L |    cvm    | 008000543 |    08031     | 2024-09-24 12:24:00 |\n",
       "|  00800105054  |        CLVYL        |    0.800    | <=0.5 µg/L |     2024     |       0.5        |  µg/L |    cvm    | 008000543 |    08031     | 2024-06-10 12:21:00 |\n",
       "+---------------+---------------------+-------------+------------+--------------+------------------+-------+-----------+-----------+--------------+---------------------+"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql \n",
    " SELECT \n",
    "   *\n",
    " FROM\n",
    "   int__resultats_udi_communes\n",
    "WHERE\n",
    "    inseecommune = '08031'\n",
    "    AND categorie = 'cvm'\n",
    "ORDER BY \n",
    "    de_partition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<span style=\"None\">Running query in &#x27;duckdb:///../../database/data.duckdb&#x27;</span>"
      ],
      "text/plain": [
       "Running query in 'duckdb:///../../database/data.duckdb'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1e00185f71b744fd8f4586b34eb15f85",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "FloatProgress(value=0.0, layout=Layout(width='auto'), style=ProgressStyle(bar_color='black'))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <thead>\n",
       "        <tr>\n",
       "            <th>inseecommune</th>\n",
       "            <th>commune_nom</th>\n",
       "            <th>periode</th>\n",
       "            <th>categorie</th>\n",
       "            <th>resultat</th>\n",
       "            <th>annee</th>\n",
       "        </tr>\n",
       "    </thead>\n",
       "    <tbody>\n",
       "        <tr>\n",
       "            <td>08031</td>\n",
       "            <td>Aure</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td>> 0,5 µg/L</td>\n",
       "            <td>2020</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>08031</td>\n",
       "            <td>Aure</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td><= 0,5 µg/L</td>\n",
       "            <td>2021</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>08031</td>\n",
       "            <td>Aure</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td>Pas recherché</td>\n",
       "            <td>2022</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>08031</td>\n",
       "            <td>Aure</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td><= 0,5 µg/L</td>\n",
       "            <td>2023</td>\n",
       "        </tr>\n",
       "        <tr>\n",
       "            <td>08031</td>\n",
       "            <td>Aure</td>\n",
       "            <td>bilan annuel</td>\n",
       "            <td>cvm</td>\n",
       "            <td>> 0,5 µg/L</td>\n",
       "            <td>2024</td>\n",
       "        </tr>\n",
       "    </tbody>\n",
       "</table>"
      ],
      "text/plain": [
       "+--------------+-------------+--------------+-----------+---------------+-------+\n",
       "| inseecommune | commune_nom |   periode    | categorie |    resultat   | annee |\n",
       "+--------------+-------------+--------------+-----------+---------------+-------+\n",
       "|    08031     |     Aure    | bilan annuel |    cvm    |   > 0,5 µg/L  |  2020 |\n",
       "|    08031     |     Aure    | bilan annuel |    cvm    |  <= 0,5 µg/L  |  2021 |\n",
       "|    08031     |     Aure    | bilan annuel |    cvm    | Pas recherché |  2022 |\n",
       "|    08031     |     Aure    | bilan annuel |    cvm    |  <= 0,5 µg/L  |  2023 |\n",
       "|    08031     |     Aure    | bilan annuel |    cvm    |   > 0,5 µg/L  |  2024 |\n",
       "+--------------+-------------+--------------+-----------+---------------+-------+"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql --with resultats_ALL_communes_name \n",
    " SELECT \n",
    "   *\n",
    " FROM\n",
    "   resultats_ALL_communes_name\n",
    "WHERE\n",
    "    inseecommune = '08031'\n",
    "    AND categorie = 'cvm'\n",
    "ORDER BY \n",
    "    annee"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
